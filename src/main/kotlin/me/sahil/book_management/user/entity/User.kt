package me.sahil.book_management.user.entity

import jakarta.persistence.*
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.NotBlank
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size
import me.sahil.book_management.book.entity.Book
import me.sahil.book_management.core.role.Role
import me.sahil.book_management.file.Entity.File
import java.time.LocalDateTime
import java.time.ZonedDateTime

/**
 * Entity class representing a user in the system.
 *
 * This class is used to map a user to the `users` table in the database. It includes information such as the user's
 * name, email, password, role, optional image, age, and lists of associated books and files. It also includes the date
 * of creation.
 *
 * @property id The unique identifier for the user. This value is automatically generated by the database.
 * @property name The name of the user.
 * @property email The email address of the user. This is a unique field in the database.
 * @property password The password of the user.
 * @property role The role of the user, stored as a string (e.g., `READER`, `ADMIN`).
 * @property image The optional URL or path to the user's profile image.
 * @property age The optional age of the user.
 * @property books The list of books authored by the user. This is a one-to-many relationship with the `Book` entity.
 * @property files The list of files associated with the user. This is a one-to-many relationship with the `File` entity.
 * @property createdAt The timestamp when the user was created. This value is set to the current time by default.
 *
 * @constructor Creates a new user entity. If the user ID is provided, it will be used to reference an existing user.
 *              Otherwise, a default user is created with the `READER` role.
 */
@Entity
@Table(name = "users")
data class User(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    val id: Long = 0,

    @Column(nullable = false)
    @field:NotBlank(message = "Name is required")
    val name: String,

    @Column(nullable = false, unique = true)
    @field:NotBlank(message = "Email is required")
    @field:Email(message = "Invalid email format")
    val email: String,

    @Column(nullable = false)
    @field:NotBlank(message = "Password is required")
    @field:Size(min = 6, message = "Password should be at least 6 characters long")
    val password: String,

    @Enumerated(EnumType.STRING) // Persist as a String
    @Column(nullable = false)
    @field: NotNull(message = "Role is required")
    val role: Role = Role.READER, // Default to READER role

    val image: String? = null,  // Optional image

    val age: Int? = null,       // Optional age

    @OneToMany(mappedBy = "author", cascade = [CascadeType.ALL], orphanRemoval = true)
    val books: List<Book> = emptyList(),  // A list of books by this user

    @OneToMany(mappedBy = "user", cascade = [CascadeType.ALL], orphanRemoval = true)
    val files: List<File> = emptyList(),  // One-to-many relationship with File

    val createdAt: ZonedDateTime = ZonedDateTime.now()
) {

    /**
     * Secondary constructor for referencing an existing user by their ID.
     *
     * This constructor is used when creating a `User` entity by referencing an existing user by their unique ID.
     *
     * @param id The unique identifier of the user to reference.
     */
    constructor(id: Long) : this(id = id, name = "", email = "", password = "")

    /**
     * Default constructor for Hibernate.
     *
     * This constructor is required by Hibernate to create a `User` instance. It initializes the user with default
     * values for the fields.
     */
    constructor() : this(0, "", "", "", Role.READER, null, 21, emptyList(), emptyList(), ZonedDateTime.now())
}

